@model List<Sistema_Tea.Models.TestInicial>
@{
    Layout = null;
    ViewData["Title"] = ViewBag.CuestionarioTitulo ?? "Test de Detección de Autismo";
}

<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <title>@ViewData["Title"] - eMind</title>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;600;700&display=swap" rel="stylesheet" />
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet" />
    <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css" rel="stylesheet" />

    <style>
        :root {
            --primary: #3b49df;
            --primary-light: #e9ecff;
            --border-radius: 16px;
            --box-shadow: 0 4px 12px rgba(0, 0, 0, 0.08);
        }

        body {
            font-family: 'Inter', sans-serif;
            background-color: #f9fafb;
            color: #212529;
            display: flex;
            flex-direction: column;
            min-height: 100vh;
        }

        .navbar-brand {
            font-weight: 700;
            font-size: 1.4rem;
            color: var(--primary);
        }

        .stepper {
            display: flex;
            justify-content: center;
            align-items: center;
            gap: 0.5rem;
            margin-bottom: 2.5rem;
            flex-wrap: wrap;
        }

        .step {
            width: 32px;
            height: 32px;
            border-radius: 50%;
            background: var(--primary-light);
            color: var(--primary);
            font-weight: 600;
            display: flex;
            align-items: center;
            justify-content: center;
            transition: background 0.3s, color 0.3s, border 0.3s;
            border: 2px solid var(--primary-light);
            font-size: 1.05rem;
            position: relative;
        }

            .step.active {
                background: var(--primary);
                color: #fff;
                border-color: var(--primary);
                box-shadow: 0 0 0 4px var(--primary-light);
            }

            .step.completed {
                background: var(--primary);
                color: #fff;
                border-color: var(--primary);
            }

            .step:not(:last-child)::after {
                content: '';
                display: block;
                width: 32px;
                height: 2px;
                background: var(--primary-light);
                position: absolute;
                right: -34px;
                top: 50%;
                transform: translateY(-50%);
                z-index: -1;
            }

            .step.completed:not(:last-child)::after {
                background: var(--primary);
            }

        @@media (max-width: 600px) {
            .stepper {
                gap: 0.2rem;
            }

            .step, .step:not(:last-child)::after {
                width: 24px;
                height: 24px;
            }

                .step:not(:last-child)::after {
                    right: -26px;
                    width: 24px;
                }

            .step {
                font-size: 0.9rem;
            }
        }

        .question-card {
            background: #fff;
            border-radius: var(--border-radius);
            padding: 2rem;
            margin: 1.5rem auto;
            box-shadow: var(--box-shadow);
            min-height: 300px;
            transition: opacity 0.4s ease-in-out, transform 0.4s ease-in-out;
            opacity: 0;
            transform: translateY(20px);
            pointer-events: none;
            position: absolute;
            left: 0;
            right: 0;
            width: 100%;
            z-index: 2;
        }

            .question-card.active {
                opacity: 1;
                transform: translateY(0);
                pointer-events: auto;
                position: relative;
                z-index: 3;
            }

        .opciones-container {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(180px, 1fr));
            gap: 1rem;
            margin-top: 1.5rem;
        }

        .opcion-card {
            background: #fff;
            border-radius: var(--border-radius);
            padding: 1.2rem 1rem;
            box-shadow: var(--box-shadow);
            cursor: pointer;
            transition: all 0.2s ease-in-out;
            border: 2px solid #eee;
            text-align: center;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
        }

            .opcion-card:hover {
                box-shadow: 0 6px 18px rgba(0, 0, 0, 0.1);
                transform: translateY(-3px);
                border-color: #ccc;
            }

            .opcion-card.selected {
                background: var(--primary-light);
                border-color: var(--primary);
                color: var(--primary);
                box-shadow: 0 4px 12px rgba(59, 73, 223, 0.2);
            }

            .opcion-card input[type="radio"] {
                display: none;
            }

            .opcion-card label {
                cursor: pointer;
                font-weight: 500;
                margin-top: 0.5rem;
                width: 100%;
                display: block;
            }

        .opcion-icon {
            width: 36px;
            height: 36px;
            border-radius: 50%;
            background: #f0f2ff;
            display: flex;
            align-items: center;
            justify-content: center;
            margin-bottom: 0.75rem;
            font-size: 1.2rem;
            color: var(--primary);
            transition: all 0.2s ease-in-out;
        }

        .opcion-card.selected .opcion-icon {
            background: var(--primary);
            color: #fff;
        }

        .question-title {
            font-weight: 600;
            font-size: 1.3rem;
            margin-bottom: 0.5rem;
            color: #333;
        }

        .question-ayuda {
            font-size: 0.9rem;
            color: #6c757d;
            margin-bottom: 1.5rem;
        }

        .submit-btn {
            font-weight: 600;
            font-size: 1.1rem;
            padding: 0.75rem 2rem;
            border-radius: var(--border-radius);
            background: var(--primary);
            color: #fff;
            border: none;
            box-shadow: 0 6px 16px rgba(59, 73, 223, 0.3);
            transition: background-color 0.3s, box-shadow 0.3s;
        }

            .submit-btn:hover {
                background: #2c3dbd;
                box-shadow: 0 8px 24px rgba(44, 61, 189, 0.5);
            }

        .nav-btn {
            min-width: 120px;
            font-weight: 500;
        }

        .shake {
            animation: shake 0.4s cubic-bezier(.36,.07,.19,.97) both;
        }

        @@keyframes shake {
            10%, 90% {
                transform: translateX(-1px);
            }

            20%, 80% {
                transform: translateX(2px);
            }

            30%, 50%, 70% {
                transform: translateX(-3px);
            }

            40%, 60% {
                transform: translateX(3px);
            }
        }

        .questions-container {
            position: relative;
            min-height: 360px;
            overflow: hidden;
        }

        footer {
            background: #fff;
            border-top: 1px solid #e9ecef;
            margin-top: 3rem;
            padding: 1.5rem 0;
        }

        .footer-content h5 {
            font-weight: 600;
            color: var(--primary);
        }

    </style>
</head>
<body>
    <header>
        <nav class="navbar navbar-expand-sm">
            <div class="container-fluid">
                <a asp-controller="TestInicio" asp-action="Index" class="navbar-brand d-flex align-items-center">
                    <i class="bi bi-hospital me-2"></i> eMind
                </a>
            </div>
        </nav>
    </header>

    <main class="container py-4">
        <div class="row justify-content-center">
            <div class="col-lg-9 col-xl-8">
                <h1 class="mb-3 fw-bold text-center display-6">@ViewData["Title"]</h1>
                @if (!string.IsNullOrEmpty(ViewBag.CuestionarioTitulo) && (string)ViewData["Title"] != (string)ViewBag.CuestionarioTitulo)
                {
                    <p class="lead text-center text-muted mb-4">@ViewBag.CuestionarioTitulo</p>
                }

                <div class="stepper" id="stepper">
                    @for (int i = 0; i < Model.Count; i++)
                    {
                        <div class="step @(i == 0 ? "active" : "")" id="step-@i" data-step-index="@i">@(i + 1)</div>
                    }
                </div>

                <form asp-controller="TestInicio" asp-action="Resultado" method="post" class="needs-validation" novalidate autocomplete="off">
                    <div class="questions-container" id="questionsContainer">
                        @for (int i = 0; i < Model.Count; i++)
                        {
                            var pregunta = Model[i];
                            <div class="question-card @(i == 0 ? "active" : "")" aria-labelledby="pregunta-titulo-@i" id="question-@i">
                                <h2 class="question-title" id="pregunta-titulo-@i">@pregunta.Texto</h2>
                                @if (!string.IsNullOrEmpty(pregunta.AyudaAdicional))
                                {
                                    <p class="question-ayuda">@pregunta.AyudaAdicional</p>
                                }
                                <div class="opciones-container">
                                    @for (int j = 0; j < pregunta.Opciones.Count; j++)
                                    {
                                        var opcionTexto = pregunta.Opciones[j];
                                        var scoreParaEstaOpcion = pregunta.ScoresPorOpcion[opcionTexto];
                                        var inputId = $"resp_{i}_{j}";

                                        var iconosDisponibles = new[] { "bi-emoji-sunglasses", "bi-emoji-smile", "bi-emoji-neutral", "bi-emoji-frown", "bi-emoji-dizzy" };
                                        var iconoActual = iconosDisponibles.Length > j ? iconosDisponibles[j] : "bi-check-circle";
                                        if (pregunta.Opciones.Count == 2)
                                        {
                                            iconoActual = (opcionTexto.Equals("Sí", StringComparison.OrdinalIgnoreCase)) ? "bi-check-circle-fill" : "bi-x-circle-fill";
                                        }

                                        <div class="opcion-card" tabindex="0" onclick="seleccionarOpcion(this, @i)" onkeydown="if(event.key==='Enter' || event.key===' '){ seleccionarOpcion(this, @i); event.preventDefault(); }">
                                            <input type="radio" name="respuestas[@i]" id="@inputId" value="@scoreParaEstaOpcion" required />
                                            <div class="opcion-icon">
                                                <i class="bi @iconoActual"></i>
                                            </div>
                                            <label for="@inputId" class="mb-0">
                                                @opcionTexto
                                            </label>
                                        </div>
                                    }
                                </div>
                                <div class="d-flex justify-content-between mt-4 pt-3 border-top">
                                    @if (i > 0)
                                    {
                                        <button type="button" class="btn btn-outline-secondary nav-btn" onclick="cambiarPregunta(@(i - 1))">
                                            <i class="bi bi-arrow-left me-1"></i> Anterior
                                        </button>
                                    }
                                    else
                                    {
                                        <div></div>
                                    }

                                    @if (i < Model.Count - 1)
                                    {
                                        <button type="button" class="btn btn-primary nav-btn" onclick="cambiarPregunta(@(i + 1))">
                                            Siguiente <i class="bi bi-arrow-right ms-1"></i>
                                        </button>
                                    }
                                    else
                                    {
                                        <button type="submit" class="btn submit-btn nav-btn">
                                            <i class="bi bi-check2-circle me-2"></i> Ver Resultado
                                        </button>
                                    }
                                </div>
                            </div>
                        }
                    </div>
                </form>
            </div>
        </div>
    </main>

    <footer class="bg-light">
        <div class="container py-4">
            <div class="row">
                <div class="col-md-6">
                    <h5 class="fw-bold" style="color:var(--primary);">Clínica de Evaluación TEA eMind</h5>
                    <p class="mb-1"><i class="bi bi-geo-alt-fill me-2"></i> Santa Ana, El Salvador</p>
                    <p class="mb-1"><i class="bi bi-telephone-fill me-2"></i> (+503) 2401-3421</p>
                    <p class="mb-1"><i class="bi bi-envelope-fill me-2"></i> eMind.info.sv@gmail.com</p>
                </div>
                <div class="col-md-6 text-md-end">
                    <p class="mb-1">© @DateTime.Now.Year Clínica eMind</p>
                    <p class="mb-0"><small>Todos los derechos reservados.</small></p>
                    <a href="#" class="text-decoration-none text-secondary"><small>Política de Privacidad</small></a>
                </div>
            </div>
        </div>
    </footer>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        let preguntaActualIdx = 0;
        const totalPreguntas = @Model.Count;
        const questionCards = document.querySelectorAll('.question-card');
        const steps = document.querySelectorAll('.step');

        function seleccionarOpcion(cardElement, preguntaIndex) {
            const currentQuestionCard = document.getElementById('question-' + preguntaIndex);
            const cardsInQuestion = currentQuestionCard.querySelectorAll('.opcion-card');
            cardsInQuestion.forEach(c => c.classList.remove('selected'));

            cardElement.classList.add('selected');
            const radioInput = cardElement.querySelector('input[type="radio"]');
            radioInput.checked = true;
        }

        function cambiarPregunta(nuevoIndex) {
            if (nuevoIndex > preguntaActualIdx) {
                 const currentQuestionCard = document.getElementById('question-' + preguntaActualIdx);
                 const isAnswered = currentQuestionCard.querySelector('.opcion-card.selected');
                 if (!isAnswered) {
                     currentQuestionCard.classList.add('shake');
                     setTimeout(() => currentQuestionCard.classList.remove('shake'), 400);
                     return;
                 }
            }

            if (nuevoIndex < 0 || nuevoIndex >= totalPreguntas) return;

            questionCards.forEach((card, index) => {
                if (index === nuevoIndex) {
                    card.classList.add('active');
                    card.style.zIndex = 3;
                } else {
                    card.classList.remove('active');
                    card.style.zIndex = 2;
                }
            });

            steps.forEach((step, index) => {
                step.classList.remove('active', 'completed');
                if (index < nuevoIndex) {
                    step.classList.add('completed');
                }
                if (index === nuevoIndex) {
                    step.classList.add('active');
                }
            });
            preguntaActualIdx = nuevoIndex;
        }

        document.addEventListener('DOMContentLoaded', function() {
            if (steps.length > 0) steps[0].classList.add('active');
            if (questionCards.length > 0) questionCards[0].classList.add('active');
        });

        (() => {
            'use strict';
            const forms = document.querySelectorAll('.needs-validation');
            Array.from(forms).forEach(form => {
                form.addEventListener('submit', event => {
                    let todasRespondidas = true;
                    for(let i=0; i < totalPreguntas; i++){
                        const preguntaCard = document.getElementById('question-' + i);
                        const seleccionada = preguntaCard.querySelector('.opcion-card.selected');
                        if(!seleccionada){
                            todasRespondidas = false;
                            if(i === preguntaActualIdx){
                                preguntaCard.classList.add('shake');
                                setTimeout(() => preguntaCard.classList.remove('shake'), 400);
                            } else {
                                cambiarPregunta(i);
                            }
                            break;
                        }
                    }

                    if (!form.checkValidity() || !todasRespondidas) {
                        event.preventDefault();
                        event.stopPropagation();
                        if(!todasRespondidas && preguntaActualIdx === totalPreguntas -1){
                             alert("Por favor, asegúrate de responder todas las preguntas antes de ver el resultado.");
                        }
                    }
                }, false);
            });
        })();

    </script>
</body>
</html>